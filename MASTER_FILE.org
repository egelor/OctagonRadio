* Boot Server SuperCollier
**  Help command
:PROPERTIES:
:DATE:     <2020-11-14 Σαβ 12:47>
:END:
#+BEGIN_SRC sclang
Atk.createUserSupportDir;
Atk.openUserSupportDir;
Atk.userSupportDir;
Atk.userSoundsDir;
Atk.userExtensionsDir ;
Atk.postMyMatrices('FOA');
Platform.systemExtensionDir
Platform.classLibraryDir
Platform.userExtensionDir
Platform.userAppSupportDir
Platform.resourceDir
MethodOverride.printAll
SCDoc.renderAll;
//-===-===-=-=-=-=
unsetenv QT_GRAPHICSSYSTEM
s=Server.local;
s.makeGui;
s.boot;
s.quit;
Quarks.gui;
GUI.current;
GUI.qt;
GUI.schemes;
GUI.skin;
GUI.makeGui ;
s.volume = 3 ;
s.queryAllNodes //run me to see the Nodes on the Server
#+END_SRC
** ProxySpace-OLD    [[file:~/.emacs.d/personal/postload/MASTER-FILE-170722.org][Master_file_Zannos.org]]
:PROPERTIES:
:DATE:     <2017-10-26 Πεμ 05:04>
:END:
C- c >  //show-post-buffer
#+BEGIN_SRC  sclang
p=ProxySpace.new(s);
p.push;
p.stop;p.release;
\p.push; //sc-hacks
#+END_SRC
ls** EQUALIZER-OLD
#+BEGIN_SRC sclang function d=EQdef
(// synth2  def2 eq2 EQdef EQSettting AudioIn [1,3]  BPeakEQ
~out = 0 ;
~dead=EQdef(*({|i| [("peek" ++ i).asSymbol,BPeakEQ ] }!20).flatten(1));  //20-bands parametric eq
~eq = EQSetting(~dead);
~micEq = {~eq.ar(AudioIn.ar([7,8]),\eqSettings.kr(~eq.setting)) }.play;
~micEq = {~eq.ar(AudioIn.ar([1,3]),\eqSettings.kr(~eq.setting)) } +> \p;
~micEq.stop;
)
(
~viewEq = EQView (eqSetting: ~eq );
~viewEq.action = { |view, setting| ~micEq.set(\eqSetting,setting) }
)
#+END_SRC

**  SynthDefs
:PROPERTIES:
:ID:       169400de-e9ae-4d95-80da-a4386813e12f
:eval-id:  2
:DATE:     <2022-09-14 Wed 11:16>
:END:
#+BEGIN_SRC sclang New Synthdefs with equalizer
*** 11,12 Input

// Base ConnectionS Inputs Outputs with  Mic Octagon Mamathron Player

( // SynthDef's of OctaGon Radio  with Equalizer
( // SynthDef Return or feadback with Equalizer6
SynthDef ("\returnO", { arg out= 2 ;
	var def6, eq6 , eqreturn;
	def6 = EQdef( *({|i| [ ("peak" ++ i).asSymbol,BPeakEQ ] }!20).flatten(1) ); //  20-bands parametric eq
	eq6 = EQSetting( def6);
	eqreturn= { eq6.ar  (AudioIn.ar([11,12]), \eqSetting.kr(eq6.setting))};
	Out.ar(out, eqreturn);
}).writeDefFile;
)
*** MicEq3
( // SynthDef Mic with Equalizer3
SynthDef ("\mic", { arg out= 0 ;
	var def3, eq3, eqmic;
	def3 = EQdef( *({|i| [ ("peak" ++ i).asSymbol,BPeakEQ ] }!20).flatten(1) ); //  20-bands parametric eq
	eq3 = EQSetting( def3 );
	eqmic = { eq3.ar  (AudioIn.ar([1,3]), \eqSetting.kr(eq3.setting))};
	Out.ar(out, eqmic);
}).writeDefFile;
)
*** Instrument 2,4 eq3
( // SynthDef Instrument with Equalizer3
SynthDef ("\inst", { arg out= 0 ;
	var def3, eq3, eqmic;
def3 = EQdef( *({|i| [ ("peak" ++ i).asSymbol,BPeakEQ ] }!20).flatten(1) ); //  20-bands parametric eq
`eq3 = EQSetting( def3 );
eqmic = { eq3.ar  (AudioIn.ar([2,4]), \eqSetting.kr(eq3.setting))};
	Out.ar(out, eqmic);
}).writeDefFile;
)
*** PlayeR 5,6 input eq2

( // SynthDef Player with Equalizer2
SynthDef ("\player", { arg out= 0 ;
	var def2, eq2 , eqplayer;
def2 = EQdef( *({|i| [ ("peak" ++ i).asSymbol,BPeakEQ ] }!20).flatten(1) ); //  20-bands parametric eq
eq2 = EQSetting( def2 );
eqplayer = { eq2.ar  (AudioIn.ar([5,6]), \eqSetting.kr(eq2.setting))};
Out.ar(out, eqplayer);
}).writeDefFile;
)
*** Browser eq4 (7,8)inputs
( // SynthDef Browser  with Equalizer4
SynthDef ("\browser", { arg out= 0 ;
	var def4, eq4 , eqbrowser;
def4 = EQdef( *({|i| [ ("peak" ++ i).asSymbol,BPeakEQ ] }!20).flatten(1) ); //  20-bands parametric eq
eq4 = EQSetting( def4 );
eqbrowser = { eq4.ar  (AudioIn.ar([7,8]), \eqSetting.kr(eq4.setting))};
Out.ar(out, eqbrowser);
}).writeDefFile;
)
*** ports (9,10) eq5
( // SynthDef Mamathron  with Equalizer5
SynthDef ("\mamathron", { arg out= 0, vol= 0 ;
	var def5, eq5 , eqmamathron;
def5 = EQdef( *({|i| [ ("peak" ++ i).asSymbol,BPeakEQ ] }!20).flatten(1) ); //  20-bands parametric eq
eq5 = EQSetting( def5 );
eqmamathron = { eq5.ar  (AudioIn.ar([9,10]), \eqSetting.kr(eq5.setting))};
Out.ar(out, eqmamathron);
}).writeDefFile;
)
*** Ports 2,4 eq7
    :PROPERTIES:
    :ID:       64577f1a-7cf6-47de-bf58-42d04b599525
    :eval-id:  2
    :END:
( // SynthDef SecondIn with Equalizer7
SynthDef ("\secondin", { arg out= 0 ;
	var def7, eq7, eqsecond;
	def7= EQdef( *({|i| [ ("peak" ++ i).asSymbol,BPeakEQ ] }!20).flatten(1) ); //  20-bands parametric eq
eq7 = EQSetting( def7 );
eqsecond = { eq7.ar  (AudioIn.ar([2,4]), \eqSetting.kr(eq7.setting))};
	Out.ar(out, eqsecond);
}).writeDefFile;
)


*** sintomotera
#+END_SRC
#+BEGIN_SRC sclang SynthDefs  In/outs with out Eq
( // SynthDef's of OctaGon Radio
SynthDef("\microphone", { arg out= 0 ; Out.ar(out, AudioIn.ar([1,3])); }).writeDefFile;
SynthDef("\epistrofi", { arg out= 2 ; Out.ar(out, AudioIn.ar([ 11,12])); }).writeDefFile;
SynthDef("player", { arg out= 0 ; Out.ar(out, AudioIn.ar([ 5,6])); }).writeDefFile;
SynthDef("\pulse", { arg out= 0 ; Out.ar(out, AudioIn.ar([ 7,8])); }).writeDefFile;
SynthDef("\mamathron", { arg out= 0 ; Out.ar(out, AudioIn.ar([ 9,10])); }).writeDefFile;
SynthDef("\Instrument", { arg out= 0 ; Out.ar(out, AudioIn.ar([ 2,4])); }).writeDefFile;
)
#+END_SRC
**  Επιστροφές (feedbacls
   :PROPERTIES:
   :DATE:     <2018-10-15 Mon 15:41>
   :END:
    lk) OctaGon Monitoring
#+BEGIN_SRC sclang returns
(  // Octagon Feadback or Return
~returnA = Synth ("\returnO",[\out, 0]);
~returnB = Synth ("\returnO",[\out, 0]);
~returnA.free; ~returnB.free;
~view2.action = { |view, setting| ~return1.set( \eqSetting, setting ) };
~view2 = EQView(eqSetting:  ~eq6);
)
#+END_SRC
#+BEGIN_SRC sclang  OLD Octagon Monitoring
~octmonit={AudioIn.ar([11,12])};
~octmonit.play(0);
~octmonit.stop;
#+END_SRC
**  Microphone ment Or Second microphone
   :PROPERTIES:
   :DATE:     <2019-12-29 Sun 16:59>
   :END:
   #+Title: Second Input from SoundCard
#+BEGIN_SRC sclang Mic with eq
~instmonitor = Synth("inst" , [\out, 1]);
~instmonitorS = Synth("inst" , [\out, 0]);
 ~instmonitor.free;~instmonitor.release;  ~instmonitorS.free;~instmonitorS.release;
~instmic = Synth("mic");//use inst too
~instmic.free;~instmic.release;
~view1.action = { |view, setting| ~instmic.set( \eqSetting, setting ) };
~view1 = EQView(eqSetting:  ~eq4);

s.boot;

~instrumentin={AudioIn.ar([2,4])}
~instrumentMonitor={AudioIn.ar([2,4])}
~instrumentIn.play(0);
~instrument.stop(0);
~instrumentMonitor.play(2);
~instrumentMonitor.stop;
{SoundIn.ar(2,4).fold2(0.3)}.play
play({
z = AudioIn.ar([2,4]);
var z;
Compander.ar(z,z,
	thresh: MouseX.kr(0.1,1),
slopeBelow: 10,
slopeAbove:1,
clampTime: 0.01,
relaxTime:0.01
);


})

)


#+END_SRC
** Player: :playlists: :
#+BEGIN_SRC sclang vlc or player
( // vlc or player to octagon

~vlc = Synth("\player");
~vlc.free; ~vlc.release;
~monitorVlc=Synth("\vlc",[\out, 1]);
~monitorVlc1=Synth("\vlc",[\out, 0]);
~monitorVlc.free; ~monitorVlc.reslease;~monitorVlc1.free; ~monitorVlc1.reslease;
 ~view3 = EQView(eqSetting:  ~eq2);
 ~view3.action = { |view, s   etting| ~vlc.set( \eqSetting, setting ) };
)
#+END_SRC
#+BEGIN_SRC sclang Player:OLD
~player={AudioIn.ar([5,6])}
~playerMinitor={AudioIn.ar([5,6]}
~player.play(0);
~player.stop;
~playerMonitor.play(2);
~playerMonitor.stop;
#+END_SRC
**  Record Output
   :PROPERTIES:
   :DATE:     <2019-12-01 Sun 18:34>
   :END:

#+Name:Record (path)
#+Arguments: Is passed to prepareForRecord (above).
#+date:<2017-10-26 Πεμ>
#+BEGIN_SRC sclang  Rec
#+BEGIN_SRC sclang  Rec
s.recHeaderFormat = "wav"
s .recChannels=2 //default: 2) Must me called before preperForRecord
s.prepareForRecord;
s.record(0);
 s.stopRecording;
Server.default.recHeaderFormat = "wav"
Server.default.recChannels =2 //default: 2) Must me called before preperForRecord
Server.default.prepareForRecord;//HELP r.record(path,bus,numChannels,node,duration );
Server.default.record( 2 );
Server.default.record(bus: 2, numChannels:2);
Server.default.stopRecording;
#+END_SRC
#+BEGIN_SRC sclang mp3
( //  \mp3rec
SynthDef ("mp3rec",  { |bufnum=0 |
 var son;
son =  Out.ar(0);
DiskOut.ar(bufnum, son);
 }).writeDefFile;
~m = MP3("Recording/mp3test.mp3", \writefile);
~m .start;
~abuffer = Buffer.alloc(s, 65526, 2);
//start writting
~abuffer.write(~m.fifo, "raw", "int16", 0 ,0 , true);
~recmp3 = Synth( "mp3rec", [\bufnum, ~abuffer.bufnum], addAction:\addToTail);
~abuffer.close; ~abuffer.free;
m.finish;
#+END_SRC
** Browser : Pulseaudio:
#+BEGIN_SRC sclang Browser
(
 // Browser
~browser = Synth("\browser", [\out, 0]);
~browser1 = Synth("\browser", [\out, 1]);
~browser = Synth("\browser");
~browser.free; ~browser.release; ~browser1.free; ~browser1.release;
~view4.action = { |view, setting| ~browser1.set( \eqSetting, setting ) };
~view4 = EQView(eqSetting:  ~eq4);
)
#+END_SRC
#+BEGIN_SRC sclang  OLD Browser::pulseadio sc:channel_in:[7,8]
~pulse={AudioIn.ar([7,8])}
~pulsemon={AudioIn.ar([7,8])}
~pulse.play(2);
~pulse.stop;
~pulsemon.play(2);
~pulsemon.stop;
~pulse.release;
~pulsemon.release;
#+END_SRC
**  MamathroN Server
#+BEGIN_SRC sclang Mamathron with eq
(//Manathron
~mamathronm= Synth("\mamathron", [\out, 2]);
~mamathronm1= Synth("\mamathron", [\out, 3]);
~mamathronm = Synth("\mamathron", [\out, 0] );
~mamathronm1 = Synth("\mamathron", [\out, 1] );
~mamathronm.free;~mamathronm.release; ~mamathronm1.free;~mamathronm1.release;
~view5.action = { |view, setting| ~mamathronm.set( \eqSetting, setting ) };
~view5 = EQView(eqSetting:  ~eq5);

~mamathron = Synth("mamathron");
~mamathron.free; ~mamathron.release;
~view5.action = { |view, setting| ~mamathron.set( \eqSetting, setting ) };
~view5 = EQView(eqSetting:  ~eq5);
#+END_SRC
#+BEGIN_SRC   sclang
~mamathron={AudioIn.ar([9,10])};
~mamathronmonitor={AudioIn.ar([9,10])};
~mamathron.play;
~mamathron.stop;~mamathron.release;
~mamathronmonitor.play(2);
~mamathronmonitor.stop;
~mamathronmonitor.release;
#+END_SRC
    # -----------------------------
** Octagon to MamathroN
#+BEGIN_SRC  sclang  Send to mamathron
// Mic to mamathron
~mamathronmic = Synth ("\mic", [\out, 4 ]);
~mamathronmic1 = Synth ("\mic", [\out, 5 ]);
~mamathronmic.free; ~mamthronmic.release; ~mamathronmic1.free; ~mamthronmic1.release;
//monitor to mamathron
~mamathronMonitor = Synth ("\return ", [\out, 4 ]);
~mamathronMonitor.free; ~mamathronMonitor.release;
~view5.action = { |view, setting| ~mamathronMonitor.set( \eqSetting, setting ) };
~view5 = EQView(eqSetting:  ~eq5);
// vlc to mamathron
~mamathronVlc = Synth("\player", [\out, 4 ]);
 ~mamathronVlc.free; ~mamathronVlc.release;
// pulse to mamathron
~mamathronBrowser = Synth ("\browser", [\out, 4 ]);
~mamathronBrowser.free; ~mamathronBrowser.release;
#+END_SRC
#+BEGIN_SRC sclang SendOctagonToMamathron
~octagontomamathron = {AudioIn.ar([11,12])}
~mictomamathron = {AudioIn.ar([1,3])};
~pulsetomamathron = {AudioIn.ar([7,8])};
~playertomamathron = {AudioIn.ar([5.6])};
~octagontomamathron.play(4);
~octagontomamathron.stop;
~mictomamathron.play(4);
~mictomamathron.stop;
~pulsetomamathron.play(4);
~pulsetomamathron.stop;
~playertomamathron.play(4);
~playertomamathron.stop;
#+END_SRC
* effects
** Distortion
#+BEGIN_SRC sclang Distortion

~distortion = (

)

#+END_SRC
** Delay
   :PROPERTIES:
   :ID:       0a5458f9-b4f1-4a2c-b5a6-694fc9d31c0a
   :eval-id:  5
   :END:
#+BEGIN_SRC sclang Delay
~instmic = Synth("inst");
~instmic.free;~instmic.release;
~view1.action = { |view, setting| ~instmic.set( \eqSetting,setting ) };
~view1 = EQView(eqSetting:  ~eq4);

a = Group.basicNew(s,1); //get Group 1

~delay = Synth.tail(a,\fxdelay, [\delaytime,0.250]);
~delay.free;
#+END_SRC
*** Delay  synth (org-sc-eval to run)
    :PROPERTIES:
    :ID:       e82c254a-c1d5-4e72-a8c1-2f730445cd8f
    :eval-id:  18
    :END:
~delay = (
 SynthDef(\fxdelay, {arg delaytime=0.1;
 var input, effect;

input=AudioIn.ar(2,4);
effect= DelayN.ar(input,1,delaytime);

Out.ar(0,effect);

}).add ;
)
** Chorusing
   :PROPERTIES:
   :ID:       a7af4782-fce6-41b8-9feb-f35da5c0c2ff
   :eval-id:  3
   :END:
#+BEGIN_SRC sclang Chorusing
**** chorusing Synth
     :PROPERTIES:
     :ID:       90e7116f-e1c2-4814-952d-7cdc148ae3c9
     :eval-id:  5
     :END:
c=(
{
var source, fx, n=10;
source = EnvGen.ar(Env([0,1,0],[0.1,0.5]),Impulse.kr(2))*AudioIn.ar(2,4);

fx= Mix.fill(n,{
var maxdelaytime = rrand(0.01,0.03);
var half = maxdelaytime*0.5;
var quarter = maxdelaytime*0.25;
//%half+(quarter*LPF.ar(WhiteNoise.ar,rrand(1.0,10)))
DelayC.ar(source,maxdelaytime,LFNoise1.kr(Rand(5,10),0.01,0.02))
});
fx
}.play;
)
**** release synth
c.release;
#+END_SRC
** Reverb
#+BEGIN_SRC sclang Reverb
~instmic = Synth("inst");
~instmic.free;~instmic.release;
~view1.action = { |view, setting| ~instmic.set( \eqSetting, setting ) };
~view1 = EQView(eqSetting:  ~eq4);

a = Group.basicNew(s,1); //get Group 1

#+END_SRC
*** Synth reverb
(
SynthDef(\fxexamplereverb, {arg delaytime=0.01, decaytime=1;
	var input;
	var numc,numa,temp;
	input=AudioIn.ar(1,3); //get two channels of input starting (and ending) on bus 0
	numc = 4; // number of comb delays
	numa = 6; // number of allpass delays
	// reverb predelay time :
	temp = DelayN.ar(input, 0.048,0.048);
	temp=Mix.fill(numc,{CombL.ar(temp,0.1,rrand(0.01, 0.1),5)});
	// chain of 4 allpass delays on each of two channels (8 total) :
	numa.do({ temp = AllpassN.ar(temp, 0.051, [rrand(0.01, 0.05),rrand(0.01, 0.05)], 1)});
	// add original sound to reverb and play it :
	Out.ar(0,(0.2*temp));
}).add;
)
*** control synth
r= Synth.tail(a, \fxexamplereverb);
r= Synth.tail(a, \fxexamplereverb, [\delaytime, 0.001]);

r.free;







#+END_SRC
** feedback
*** release
#+BEGIN_SRC sclang
j.stop;
#+END_SRC
*** synth
    :PROPERTIES:
    :ID:       8960e715-c4ee-4dcb-8d7f-ced232df2d57
    :eval-id:  3
    :END:
j = (
{
    var local, in, amp;

    in = AudioIn.ar([2,4]);

    amp = Amplitude.kr(Mix.ar(in));
    in = in * (amp > 0.02); // noise gate

    local = LocalIn.ar(2);
    local = OnePole.ar(local, 0.4);
    local = OnePole.ar(local, -0.08);

    local = Rotate2.ar(local[0], local[1], 0.2);

    local = DelayN.ar(local, 0.55, 0.55);

	local = LeakDC.ar(local);
    local = ((local + in) * 1.55).softclip;

    LocalOut.ar(local);
    local * 0.1;
}.play;
)

** Flanging
*** help run
#+BEGIN_SRC sclang help


m.free

a = Group.basicNew(s,1); //get Group 1

y= Synth.tail(a, \fxflanging);


y.set(\flangefreq,1.5);


y.set(\fdback, 0.16);


y.free;





y = Synth("fxexamplephasing", [\freq, 50]);


#+END_SRC

*** Synth
    :PROPERTIES:
    :ID:       1990f533-445e-49b1-943f-42a71e45d851
    :eval-id:  8
    :END:
m = (

SynthDef(\fxflanging, {arg flangefreq=0.1, fdback=0.1;

var input, effect;


input=In.ar(0,1); //get two channels of input starting (and ending) on bus 0


input= input+ LocalIn.ar(2); //add some feedback


effect= DelayN.ar(input,0.02,SinOsc.kr(flangefreq,0,0.005,0.005)); //max delay of 20msec


LocalOut.ar(fdback*effect);

//LocalOut.ar(fdback*BPF.ar(effect,MouseX.kr(1000,10000),0.1)); //alternative with filter in the feedback loop



Out.ar(0,effect); //adds to bus 0 where original signal is already playing

}).add;

)

** compression
*** help
#+BEGIN_SRC sclang

a = Group.basicNew(s,1); //get Group 1
k= Synth.tail(a, \fxcompression);
k.set(\gain,0.4);
k.set(\threshold, 0.36);
k.free;
~c.free;


#+END_SRC

*** synth
    :PROPERTIES:
    :ID:       e9413385-b620-4a05-8511-08cabde356ef
    :eval-id:  2
    :END:
~c=(
SynthDef(\fxcompression, {arg gain= 1.5, threshold=0.5;
	    var input, effect;
	input=In.ar(0,2);//get two channels of input starting and ending on bus 0
	effect = CompanderD.ar(gain*input,threshold,1,0.5);
	ReplaceOut.ar(0,effect); //replace bus 0 where original signal is already playing

}).add;
)
** limiter
***  master
y= Synth.tail(a, \fxlimiter);
y.set(\gain, 6); //careful with your ears!

y.free;

~limiter.free;

*** limiter synth
    :PROPERTIES:
    :ID:       56999406-2c8d-46a0-b51d-d75a7dd5b1a7
    :eval-id:  2
    :END:
~limiter = (
SynthDef(\fxlimiter,{arg gain=1;
var input, effect;
input= In.ar(0,2);
effect= Limiter.ar(gain*input,0.99,0.01);
ReplaceOut.ar(0,effect);  //replaces bus 0 where the original signal is already playing
}).add;
)
** Pan2 + PanAz
   #+BEGIN_SRC sclang pan
~pan2 = {Pan2.ar(AudioIn.ar(2,4),MouseX.kr(-1,1))}.scope;
~panaz = {PanAz.ar(8,AudioIn.ar(2,4),MouseX.kr(0,2))}.scope;
~panaz.stop;
   #+END_SRC
** Delay radialdistance
*** stop
~radistdelay.stop;
*** radialdistance
   :PROPERTIES:
   :ID:       289fb9bd-31c2-4213-9a21-3d6b0e2cfaf3
   :eval-id:  7
   :END:
~radistdelay = (

{

var radialdistance = Line.kr(10,-10,5,doneAction:1000);


DelayC.ar(AudioIn.ar(2,4),1.0, radialdistance.abs/340.0);



}.scope;

)

** Doppler effect: pitch shift proportional to radial distance:

#+BEGIN_SRC sclang Doppler
//approximate speed of sound as 340 m/s
~instmic = Synth("inst");
~doppler.stop;
//no frequency dependent filtering effects
*** Doppler code
    :PROPERTIES:
    :ID:       9a9ccced-806c-4395-ac5d-ba97ab117674
    :eval-id:  35
    :END:
~doppler = (

{

var source, radialdistance, absoluterd, dopplershift, amplitude;


source=AudioIn.ar(2,4);
//Saw.ar(Demand.kr(Impulse.kr(LFNoise0.kr(0.5,0.1,2)),0,Dseq([63,60].midicps,inf)));	//nee-naw emergency vehicle simulation



//in metres, moving at 6.8 metres per second

radialdistance= EnvGen.ar(Env([34,-34],[10]),doneAction:200);


absoluterd= radialdistance.abs;


//if something is 340 metres away, takes 1 second to get there; so make delay depend on distance away in metres

dopplershift= DelayC.ar(source, 1.0, absoluterd/340.0);


//inversely proportional

amplitude= (absoluterd.max(1.0)).reciprocal;


Pan2.ar(amplitude*dopplershift,0.0)

}.play;

)

*** end

#+END_SRC

** frequency Shift
#+BEGIN_SRC sclang freqshift
~freqshift= {FreqShift.ar(SoundIn.ar([1,3],0.2),MouseX.kr(0,3000),SoundIn.ar([1,3],0.2)*(MouseY.kr(0,50)))}.scope;


~freqshift.stop;
#+END_SRC

** Warp1 granular pitch shifter
#+BEGIN_SRC sclang Warp1
//We mentioned the granular pitch shifter UGens PitchShift and Warp1 in passing back in the granular synthesis materials.


//Let's take a closer look at Warp1, which accomplishes granular time stretching and pitch shifting of the grains.




//overlaps eight windows of 0.1 seconds, so one window every 0.1/8 = 0.0125 seconds

~overlaps={Warp1.ar(2,b,pointer:MouseX.kr,freqScale:(2**(MouseY.kr(-2,2))),windowSize:0.1,add:0)}.scope
~overlaps.stop;

//increasingly randomise window shape to avoid rough repetition sounds

~granular={Warp1.ar(2,b,pointer:MouseX.kr,freqScale:1.0,windowSize:0.1, windowRandRatio:MouseY.kr(0.0,0.9))}.scope
~granular.stop;


#+END_SRC
** TODO Synth
***  Help Run
#+BEGIN_SRC sclang help

b = Buffer.read(s,Platform.resourceDir +/+"sounds/SinedPink.aiff");
a = Group.basicNew(s,1); //get Group 1
~synth1 = Synth.tail(a, \windowofsound);
~synth1.set(\dur,0.4);
~synth1.set(\pan, 0.36);
~synth1.free;
*** Synth
    :PROPERTIES:
    :ID:       6be36051-3b6d-4c56-a08e-9ee58edf6206
    :eval-id:  9
    :END:
~winofsound = (

SynthDef(\windowofsound,{|out=0 dur=0.0 bufnum=0 amp=0.1 rate=1.0 pos=0.0 pan=0.0|

var env, source;



env= EnvGen.ar(Env([0,1,0],[0.5,0.5]*dur,'sine'),doneAction:2);

//Env([0,1,0],[0.1,0.1],'sine').plot



source = PlayBuf.ar(1,bufnum,BufRateScale.kr(bufnum)*rate,1.0,pos*BufFrames.ir(bufnum),loop:0); //don't allow loop



//OffsetOut for sample accurate starts of grains

OffsetOut.ar(out,Pan2.ar(source*env,pan));

}).add;

)

*** end
#+END_SRC

* Eugenion Radio :osc: Ανάπτυξη
#+BEGIN_SRC sclang DX7
~mainCaller.value(80,100,10002);
#+END_SRC
** OscP5 processing sc
[[file:~/Scores/sketchbook/oscOpenObjectSc/oscOpenObjectSc.pde][oscObject.pde]]
#+BEGIN_SRC  sclang
OpenObject.start
(   // \subnet_step16 Synth
SynthDef(\subnet_step16, {|amp= 1, pan= 0, freq= 400, modAmp= 1, lag= 0.05, rate= 8, freqPat= #[0, 1, 0, 0, 0, 0, 0, 0.4, 0, 0, 1, 1, 0, 1, 0, 0], ampPat= #[1, 0, 0.2, 0.1, 0, 1, 0, 0.1, 1, 0, 0.5, 1, 0.5, 0, 0.2, 0.1]|
	var src, trig, freqSeq, ampSeq, pm;
	trig= Impulse.kr(rate);
	freqSeq= Demand.kr(trig, 0, Dseq(freqPat, inf));
	ampSeq= Demand.kr(trig, 0, Dseq(ampPat, inf));
	pm= SinOsc.ar(Lag2.kr(freqSeq, lag)+1*freq, Decay2.kr(trig, lag)*2pi, Lag.kr(modAmp, lag));
	src= SinOsc.ar(0, pm, Lag.kr(ampSeq, lag));
	Out.ar(0, Pan2.ar(src, pan, amp));
}).add;
)

(
a= Synth(\subnet_step16).publish(\seq);
c= {|name, index, val| a.getn(name, 16, {|x| a.setn(name, x.put(index, val))})};	//helper function
c.publish(\seqHelper);
)
//now open the file openobject_demo05_processing.pde in processing
//--clean up
a.free;
OpenObject.end
#+END_SRC
** \verb   :out:
#+BEGIN_SRC sclang Delay
(  // \verb
Ndef( \verb, {
	var input, output, delrd, sig, deltimes;
	// Choose which sort of input you want by (un)commenting these lines:
	//input = Pan2.ar(PlayBuf.ar(1, b, loop: 0), -0.5); // buffer playback, panned half
	input = SoundIn.ar([0,1]); // TAKE CARE of feedback - use headphones
	//input = Dust2.ar([0.1, 0.01]); // Occasional clicks
	// Read our 4-channel delayed signals back from the feedback loop
	delrd = LocalIn.ar(4);
	// This will be our eventual output, which will also be recirculated
	output = input + delrd[[0,1]];
	sig = output ++ delrd[[2,3]];
	// Cross-fertilise the four delay lines with each other:
	sig = ([ [1, 1, 1, 1],
		[1, -1, 1, -1],
		[1, 1, -1, -1],
		[1, -1, -1, 1]] * sig).sum;
	// Attenutate the delayed signals so they decay:
	sig = sig * [0.4, 0.37, 0.333, 0.3];
	// Here we give delay times in milliseconds, convert to seconds,
	// then compensate with ControlDur for the one-block delay
	// which is always introduced when using the LocalIn/Out fdbk loop
	deltimes = [101, 143, 165, 177] * 0.001 - ControlDur.ir;
	// Apply the delays and send the signals into the feedback loop
	LocalOut.ar(DelayC.ar(sig, deltimes, deltimes));
	Out.ar(0, output);
}).play
)
(Ndef)(\verb).free;
#+END_SRC
**  Ηχητικό περιβάλλον SplayNdef Μπάμπης  ::
    #+BEGIN_SRC sclang To περιβάλλον Μπάμπης
(
Ndef(\b, {
	var sig;
	sig = PinkNoise.ar(0.2 ! 2 );
	2.do{sig = BPF.ar(sig, ([50, 62, 65, 72, 76, 89]).midicps, 0.03, 5)};
	// sig = sig * LFSaw.kr({ExpRand(0.5,4)!6 }).exprange(0.01,1).squared;
	sig = Splay.ar(sig.scramble);
	sig = sig.blend(FreeVerb.ar(sig , 1), 0.5 );
} ).fadeTime_(2)
)
k= Ndef (\b)
k.play;
Ndef(\b).clear(10);
~pink.stop;
    #+END_SRC
** Play-mp3-Records
#+BEGIN_SRC sclang mp3
( // Synth mp3player
SynthDef("mp3player", { |out = 0, bufnum = 0|
	var son, wibble;
	son = DiskIn.ar(2, bufnum);
//	wibble = LFPar.kr(0.1).range(0.5, 2.0);
	son = PitchShift.ar(son);   // , pitchRatio: wibble);
	Out.ar(out, son);
}).writeDefFile;
)
m = MP3("http://192.168.2.9:8003/start", \readurl);
m = MP3 (Platform.resourceDir +/+ "sounds/mp3test.mp3");
// Now use the buffer and Synth to read the var.fifo
e = Buffer.cueSoundFile(s, m.fifo, 0, 2 );
x = Synth ("mp3player", [\bufnum, e.bufnum]);
m.start;
e.close; e.free;
m.finish;
m.playing;
#+END_SRC
** Play-Records
   :PROPERTIES:
   :DATE:     <2020-12-06 Sun 16:42>
   :END:
#+BEGIN_SRC sclang

b = Buffer.read(s, Platform.resourceDir +/+ "sounds/Korg/BD-ER1-GoaKick.wav");
a = Buffer.read(s, Platform.resourceDir +/+ "sounds/SC_180107_194510_Psalmodia.wav");
a.play;
a.stop; a.free;
~ab = Buffer.read(s,Platform.resourceDir +/+
"sounds/sc_synths/SC_180203_3metraLegcell.wav");
~ab.play;
#+END_SRC
#+BEGIN_SRC sclang Buffers
~logo1 = Buffer.read(s,Platform.resourceDir  +/+ "sounds/logo1.wav")
~hiphopNight = Buffer.cueSoundFile(s, Platform.resourceDir +/+ "sounds/hiphopLiveNight.wav");
SynthDef("tutorial-Buffer-cue", {arg out=0, bufnum;
	Out.ar(out,
	eq3.ar (DiskIn.ar(2,bufnum), \eqSetting.kr(eq3.setting)
	)
}).add;
~playlogo = Synth.new("tutorial-Buffer-cue", [\bufnum,  ~logo1 ], s );
~playhipN = Synth.new ("tutorial-Buffer-cue", [\bufnum, 6 , ~hiphopNight],s);
~playlogo.free;
~playhipN.free;
~equalizer.action = { |view, setting| ~playhipN.set( \eqSetting, setting )}
~equalizer = EQView(eqSetting:  ~eq3);
   #+END_SRC
#+BEGIN_SRC sclang gui player
(
w = QWindow.new("File", Rect(200, 300, 740, 100));
a = SoundFileView.new(w, Rect(20,20, 700, 60));
f = SoundFile.new;
f.openRead(Platform.resourceDir +/+ "sounds/logo1.wav");
f.inspect;
f.play;
a.soundfile = f;
a.read(0, f.numFrames);
a.elasticMode = true;
a.timeCursorOn = true;
a.timeCursorColor = Color.red;
a.timeCursorPosition = 2050;
a.drawsWaveForm = true;
a.gridOn = true;
a.gridResolution = 0.2;

w.front;
)
#+END_SRC
** parameters DX7, filters
#+BEGIN_SRC sclang scale knobs with linlin
knob_array = [0,0,0,0,0,0,0,0];
8.do ({arg i;
l = GUI.knob.new (w, Rect(rrand(20,300 ), rrand(20,300 ), 60, 100));
l.action = {arg knob;
knob_array[i] = knob.value;
lpfreq = knob_array[0].linlin(0,1,200,10000);
hpfreq = knob_array[1].linlin(0,1,200,1000);
deltime =knob_array[2].linlin(0,1, 0.0001, 0.999);
dectime =knob_array[3].linlin(0,1, 0.01, 0.999);
lforate =knob_array[4].linlin(0,1,0.01, 15 );
lpamount =knob_array[5].linlin(0,1, 0.01, 0.999);
hpamount = knob_array[6].linlin(0,1, );
gaincontrol = knob_array[7].linlin(0,1,1.01,3);
 lp.set (\freq, lpfreq, \rate, lforate, \amount, lpamount);
};
});
QStaticText( w, Rect( 20, 20, 95, 50 )).string_( "Select OSC").align_( \center );
QStaticText( w, Rect( 20, 20, 60, 50 )).string_( "LP freq").align_( \center );

#+END_SRC
#+BEGIN_SRC sclang DX7 synth InfEfx
outBus pithch gate
lfoGet1 2
lfo_spped
lfo_wave
lfo_phase
lfo_delay
lfo_pmd
lfo_amd
lfo_pms
pitchCons
envTrig
tameC
tameM
eg_r1 4 eg_L1 4


#+END_SRC
#+BEGIN_SRC sclang DX7
coarseArrR  // r= 0..32 && f= 1..1000
fineArrR  && F // R= 1..2  = 1..1000
voice_eg_rate_rise_duration = 40..0
dx7_voice_eg_rate_rise_duration  //  0..1
velTable // -99..0
dx7_voice_lfo_frequency // range 0..50
dx7_voice_pms_to_semitones= #[
0.0, 0.450584, 0.900392, 1.474744, 2.587385, 6.982097, 12],
dx7_voice_amd_to_ol_adjustment //range 0..53
dx7_voice_pitch_level_to_shift // -50..50
vr = Array.fill(256,63),
noteArrayDxX7 = Array.newClear(128),
defme
defjamHead
betass
headno
defPitchEnv
noteParser
envCal
dumm
selector
feebackSel
feedbackIndex
waveform_selector
phase_selector
wf =Array2D.fromArray(32,42, [//algorith matrix])
cirklonCCparse


#+END_SRC
** lfo '
#+BEGIN_SRC sclang
busMePitch = Bus.audio(s,1);
lfoSqr = Buffer.alloc(s,512,1),
lfoSawDown = Buffer.alloc(s,512,1),
lfoSawUp = Buffer.alloc(s,512,1),
lfoSin = Buffer.alloc(s,512,1),
lfoTri = Buffer.alloc(s,512,1),
lfoSqr.sine3(Array.series(50,1,2), 1/Array.series(50,1,2)); //square waveform
lfoTri.sine3(Array.series(50,1,2), ((1/(Array.series(50,1,2).squared))* [-1,1]));
lfoSawDown.sine3(Array.series(100,1,1),(1/(Array.series(100,1,1))*[-1,1]),4pi);
lfoSawUp.sine3(Array.series(100,1,1),(1/(Array.series(100,1,1))*[-1,1]),3pi);
lfoSin.sine3([1],[1]);
waveform_selector = [lfoTri, lfoSawDown,lfoSawUp,lfoSqr,lfoSin];
lfo = Osc.ar(lfo_wave, lfo_speed, lfo_phase, 0.5 * lfoGet2, 0.5 * lfoGet2) + LFNoise0.ar(lfo_speed, 0.5 * lfoGet1, 0.5 * lfoGet1);

#+END_SRC
** Folder Project_Reading_one
file 20181128.sc best of additive  sc3ege.sc
Synths.sc

* Βοηθήματα
** MP3 & distortion
  :PROPERTIES:
  :DATE:     <2019-12-29 Sun 17:39>
  :END:
  #+BEGIN_SRC sclang Help
MP3.lamepath;
MP3.curlpath;

( //histogram plot
var randomNumbers, histogram, maxValue = 500.0, numVals = 10000;

randomNumbers = Array.fill(numVals, { maxValue.linrand; });

histogram = Signal.newClear(maxValue);

randomNumbers.do({ arg each; var count, histoIndex;
	histoIndex = each.asInteger;
	count = histogram.at(histoIndex);
	histogram.put(histoIndex, count + 1)
});

histogram.plot("histogram for linrand 0 - " ++ maxValue);
)

  #+END_SRC
#+BEGIN_SRC sclang  distortion

SynthDef(\distort, { arg out=0, pregain=40, amp=0.2, gate=1;
var env;
env= Linen.kr(gate, 0.05, 1, 0.1, 2);
XOut.ar(out, env, (SoundIn.ar(out,2)*pregain).distort*amp);
}, [\ir, 0.1, 0.1, 0]).store;

a = Synth(\distort, addAction:\addToTail)
a.free;
// fuzz
{Decimator.ar(SoundIn.ar(0), 10000, 1)}.play
~fuzz = {FreeVerb.ar(SoundIn.ar(0).distort)}.play
~fuzz.stop;
#+END_SRC
#+BEGIN_SRC sclang commpressor
Compander.ar()

#+END_SRC
** two channel reverb (gverb)
s.scope(2);
#+BEGIN_SRC sclang run

// bathroom
a = Synth(\test, [\roomsize, 5, \revtime, 0.6, \damping, 0.62, \inputbw, 0.48, \drylevel -6, \earlylevel, -11, \taillevel, -13]);
a.free;

//living room
a = Synth(\test, [\roomsize, 16, \revtime, 1.24, \damping, 0.10, \inputbw, 0.95, \drylevel -3, \earlylevel, -15, \taillevel, -17]);
a.free;

//church
a = Synth(\test, [\roomsize, 80, \revtime, 4.85, \damping, 0.41, \inputbw, 0.19, \drylevel -3, \earlylevel, -9, \taillevel, -11]);
a.free;

// cathedral
a = Synth(\test, [\roomsize, 243, \revtime, 1, \damping, 0.1, \inputbw, 0.34, \drylevel -3, \earlylevel, -11, \taillevel, -9]);
a.free

// canyon
a = Synth(\test, [\roomsize, 300, \revtime, 103, \damping, 0.43, \inputbw, 0.51, \drylevel -5, \earlylevel, -26, \taillevel, -20]);
a.free;

s.quit;
#+END_SRC
*** synth
    :PROPERTIES:
    :ID:       4a876b0a-afb9-4986-9a9f-37cdae5b3f69
    :eval-id:  9
    :END:
//#+BEGIN_SRC sclang Synth
~gverb=SynthDef(\test, {arg roomsize, revtime, damping, inputbw, spread = 15, drylevel, earlylevel,
        taillevel;
	//var a = Resonz.ar(
	//  Array.fill(4, {Dust.ar(2)}), 1760 * [1, 2, 4, 8], 0.01).sum * 10;
	var a = SoundIn.ar(1);
	// var a = PlayBuf.ar(1, 0);
    Out.ar(0, GVerb.ar(
        a,
        roomsize,
        revtime,
        damping,
        inputbw,
        spread,
        drylevel.dbamp,
        earlylevel.dbamp,
        taillevel.dbamp,
        roomsize, 0.3) + a)}).add

* org-sources
-fontify-buffer
#+BEGIN_SRC emacs-lisp fontify
(setq org-src-fontify-natively t)
#+END_SRC

#+RESULTS:
: t
OSCFunc.defaultDispatcher
